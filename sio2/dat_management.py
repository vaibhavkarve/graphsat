#!/usr/bin/env python3.9
"""Functions for reading and writing the dat files."""
# Imports from standard library.
import ast
import os
from typing import Any, Iterator, Optional

# Imports from third-party packages.
from loguru import logger

# Local imports.
import graphsat.mhgraph as mhg


def str_to_mhgraph(string: str) -> mhg.MHGraph:
    """Function for evaluating string list of edges.

    Example:
       (1, 2), (2, 3, 4) --> mhg.mhgraph([[1, 2], [2, 3, 4]])
       ((1, 2), (2, 3, 4)) --> mhg.mhgraph([[1, 2], [2, 3, 4]])  , i.e. the same result.
    """
    if string:
        return mhg.mhgraph(ast.literal_eval('(' + string + ')'))
    raise ValueError('Encountered empty line in dat file.')


def log_fuction(function_name: str, output_file: Optional[str] = None) -> Any:
    """Create a logger that logs only messages generated by a particular function."""
    if output_file is None:
        output_file = function_name

    logger.add(sink=output_file,
               level='SUCCESS',
               format='<lvl>{message}</>',
               filter=lambda record: record['extra'].get('name') == function_name,
               colorize=False,
               mode='w')
    return logger.bind(name=function_name)


def read_dat(filename: str) -> Iterator[mhg.MHGraph]:
    """Read a database file.

    Return an iterator of MHGraphs.

    """
    with open(filename, 'r') as readfile:
        return map(str_to_mhgraph, readfile.readlines())


def write_dat(filename: str, mhg_iter: Iterator[mhg.MHGraph]) -> None:
    """Write to database file."""
    mhg_str: Iterator[str]
    mhg_str = map(lambda mhgraph: str(list(map(tuple, mhgraph.elements()))),
                  mhg_iter)

    with open(filename, 'w') as writefile:
        writefile.write('\n'.join(mhg_str) + '\n')
